Prometheus Remote Secrets

Prometheus 遠端機密（Remote Secrets）

作者：Daniel Hrabovcak
文件狀態：審閱中
建立時間：2023 年 10 月 26 日
上次重大更新：2023 年 11 月 3 日

目標
允許 Prometheus 從遠端機密提供者（Secret Providers）讀取機密資料。

提案
引入類似服務發現（Service Discovery）的機密發現機制，允許不同的機密提供者撰寫相應的程式碼，以從其 API 中讀取機密。

相關背景
社群對這項功能需求極高：
- 曾有讀取 AWS Secrets 的提案，獲得支持但尚未正式審查。
- 曾有後端插件機制的提案，但因缺乏設定方式的完整提案而被關閉。
- 多個 GitHub Issue、Prometheus 使用者群組與 StackOverflow 上都提到了密碼加密的需求。

設計概覽
目前 Prometheus 支援從檔案系統讀取機密或將機密直接寫入設定檔。

我們將加入使用機密提供者的功能。以 BasicAuth 為例，目前設定方式如下：
```yaml
password: <secret>
password_file: <string>
```

動機
目前方式的問題：
- 需要將密碼寫在檔案中或硬編碼到設定檔，可能較不安全。
- 在 Kubernetes 中，若使用 Secret 檔案，必須額外掛載 Secret，增加部署複雜度。
- 使用檔案系統存放機密，安全性低於從遠端載入並僅存於記憶體中。

新增設定
我們將新增：
```yaml
password_ref: <string>
```
這會指向 Prometheus 設定檔另一區段的機密。

Kubernetes 的範例設定如下：
```yaml
secret_providers:
  - kubernetes_sp_config:
      config:
        api-server: kube-api-url-1
      secrets:
        - name: xyz
          config:
            secret:
              name: secret1
              namespace: ns1
              key: k1
  - kubernetes_sp_config:
      config:
        api-server: kube-api-url-2
      secrets:
        - name: abc
          config:
            config_map:
              name: config1
              namespace: ns2
              key: k1
```

Prometheus 將搜尋名稱為 `password_ref` 的對應機密，並在不同 scrape 端點間重複使用該機密，例如：
```yaml
basic_auth:
  username: user1
  password_ref: abc

basic_auth:
  username: user2
  password_ref: xyz
```

機密名稱在不同提供者間不可重複，這讓用戶可以更換提供者而無須修改 scrape 設定。

詳細設計
機密提供者需實作下列介面：
```go
type Secret interface {
  Fetch(ctx context.Context) (string, error)
}
```
此方法會在每次 scrape 前被呼叫，提供者可即時擷取或使用快取。

提供者本身需實作：
```go
type Provider[T comparable] interface {
  Add(ctx context.Context, config *T) (Secret, error)
  Update(ctx context.Context, configBefore, configAfter *T) (Secret, error)
  Remove(ctx context.Context, config *T) error
}
```

若設定變更，Prometheus 會通知提供者，讓其新增、更新或移除快取。

設定介面
所有提供者需實作以下介面：
```go
type Config[T comparable] interface {
  Name() string
  NewProvider(ctx context.Context, opts ProviderOptions) (Provider[T], error)
}
```
其中 `Name()` 回傳的名稱會用於 YAML 設定中的 key，例如 `${NAME}_sp_config`

註冊提供者範例：
```go
func init() {
  secrets.RegisterConfig(newKubernetesSecretProviderConfig())
}
```

啟動時或設定變更時，會建立提供者實體，可預先載入快取或建立連線。

指標（Metrics）
Prometheus 將提供以下監控指標：
1. 無法載入的機密提供者設定數量。
2. 無法載入的機密設定數量。
3. 目前已載入的機密提供者數量。
4. 目前已載入的機密數量。

替代方案考量

Inline Secrets
若採用內嵌方式會使設定冗長，使用機密對應（mapping）更佳。

服務設定內嵌（Service Config Inline）
將機密直接定義於 top-level 層級，範例如下：
```yaml
secrets:
  - name: xyz
    kubernetes_sp_config:
      secret:
        name: secret1
        namespace: ns1
        key: k1
      api-server: kube-api-url-1
  - name: abc
    kubernetes_sp_config:
      config_map:
        name: config1
        namespace: ns2
        key: k1
      api-server: kube-api-url-2
```

優點：易於人類掃描目前有哪些 secrets
缺點：設定中會有很多重複的內容

服務設定映射（Service Config Mappings）
使用 mapping 可避免重複內容，範例如下：
```yaml
secrets:
  - name: xyz
    kubernetes_sp_config:
      secret:
        name: secret1
        namespace: ns1
        key: k1
    config_name: kube1
  - name: abc
    kubernetes_sp_config:
      config_map:
        name: config1
        namespace: ns2
        key: k1
    config_name: kube2

secret_providers:
  - name: kube1
    kubernetes_service_config:
      api-server: kube-api-url-1
  - name: kube2
    kubernetes_service_config:
      api-server: kube-api-url-2
```

優點：易於檢視與撰寫程式處理，資料結構更清晰
缺點：有三層對應（scrape -> secret -> provider）

棄用現有選項
未來可能棄用 `password` 與 `password_file`，改以 `inline_sp_config` 或 `filesystem_sp_config` 實作。

檔案加密（Filesystem Encryption）
使用者常提出希望從加密的檔案讀取密碼，未來可能會加入支援加密欄位的 `filesystem_sp_config`。

聯邦支援（Federation）
當多個 Prometheus 節點共同使用同一 Secret Provider 時，可能會導致成本上升。將來可能支援集中快取 Secret 的機制。

